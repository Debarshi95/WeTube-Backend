generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  username   String       @unique
  email      String?      @unique
  token      String?
  password   String
  pic        String       @default("https://picsum.photos/200")
  createdAt  DateTime     @default(now())
  comments   Comment[]
  user       Video[]
  playlists  Playlist[]
  likes      VideoLike[]
  views      View[]
  watchLater WatchLater[]
}

model Video {
  id          String              @id @default(uuid())
  title       String
  description String?
  url         String
  thumbnail   String
  userId      String
  createdAt   DateTime            @default(now())
  user        User                @relation(fields: [userId], references: [id])
  categories  CategoriesOnVideo[]
  comments    Comment[]
  likes       VideoLike[]
  views       View[]
  playlist    PlaylistOnVideo[]
  watchLater  WatchLater[]

}

model CategoriesOnVideo {
  videoId    String
  categoryId String
  createdAt  DateTime @default(now())
  category   Category @relation(fields: [categoryId], references: [id])
  video      Video    @relation(fields: [videoId], references: [id])

  @@id([videoId, categoryId])
}

model PlaylistOnVideo {
  id        String   @id @default(uuid())
  playlistId String
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  videoId    String
  video     Video    @relation(fields: [videoId], references: [id])
}

model View {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model VideoLike {
  id        String   @id @default(uuid())
  like      Int      @default(0)
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}

model Category {
  id        String              @id @default(uuid())
  name      String
  createdAt DateTime            @default(now())
  videos    CategoriesOnVideo[]
}

model Playlist {
  id        String            @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id])
  videos    PlaylistOnVideo[]

}

model WatchLater {
  id        String   @id @default(uuid())
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id])
}
